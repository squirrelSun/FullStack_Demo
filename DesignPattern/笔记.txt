七大设计原则
	单一职责原则
		对类而言，一个类应该只负责一项职责（降低类的负责度）
	接口隔离原则
		一个类对另一个类的以来应该建立在最小接口上
	依赖倒转原则（面向接口编程）
		高层模块不依赖低层模块，二者均依赖其抽象（类或接口）
		抽象应该不依赖细节，细节应该依赖抽象	（细节具有多变性、抽象具有稳定性）
		抽象制定规范，不涉及具体操作，细节完成任务实现
	里氏替换原则
		所有引用基类的地方必须能透明的使用其子类的对象（子类尽量不去重写父类方法）
	开闭原则（OCP）
		对扩展开放，对修改关闭。用抽象构建框架，用实现扩展细节
		当代码需要变化时，通过扩展软件实体的行为实现变化，而不是通过修改已有代码实现变化
	迪米特法则（最少知道原则）
		类与类关系越密切，耦合度越大
		将一个类对于自己依赖的类了解越少越好。对于被依赖的类，尽量将逻辑封装在类的内部，对外除了提供public方法，不对外泄露任何信息
	合成复用原则
		尽量使用合成/聚合的方式，而不是使用继承
	
创建型模式
	单例模式（long.Runtime，饿汉式）、抽象工厂模式（util.Calendar，简单工厂模式）
	原型模式（util.Array）、建造者模式（long.StringBuilder）、工厂模式
结构型模式
	适配器模式（SpringMVC中的HandlerAdapter）、桥接模式（JDBC的Driver接口）、装饰者模式（InputStream）
	组合模式（HashMap）、外观模式（MyBatis的Configuration）、享元模式（池技术）、代理模式
行为型模式
	模板方法模式（Spring IOC容器初始化）、命令模式（Spring JdbcTemplate）、访问者模式
	迭代器模式（ArrayList）、观察者模式（Observable）、中介者模式（MVC模式）、备忘录模式
	解释器模式（Spring中SpelExpressionParser）、状态模式、策略模式（util.Arrays中排序时）
	责任链模式（SpringMVC中的HandlerExecutionChain）
	
	